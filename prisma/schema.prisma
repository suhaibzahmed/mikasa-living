generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id          String   @id @default(uuid())
  firebaseUid String   @unique
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id          String    @id @default(uuid())
  firebaseUid String    @unique
  name        String
  email       String?   @unique
  phone       String
  address     String?
  reviews     Review[]
  booking     Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Vendor {
  id                 String             @id @default(uuid())
  firebaseUid        String             @unique
  companyName        String
  gstNumber          String
  gstCertificate     String?
  phone              String
  email              String             @unique
  description        String?
  services           String[]
  plan               Plan               @relation(fields: [planId], references: [id])
  planId             String
  billingCycle       BillingCycle
  verificationStatus VerificationStatus @default(PENDING)
  profileImage       String?
  photos             Photo[]
  videos             Video[]
  threeDimensional   ThreeDimensional[]
  reviews            Review[]
  availability       Availability?
  featured           Featured?
  booking            Booking[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Booking {
  id          String        @id @default(uuid())
  vendor      Vendor        @relation(fields: [vendorId], references: [id])
  vendorId    String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  status      BookingStatus @default(PENDING)
  message     String
  requestDate DateTime
  requestTime String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

model Review {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  vendor    Vendor?  @relation(fields: [vendorId], references: [id])
  vendorId  String?
  comment   String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id        String   @id @default(uuid())
  url       String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThreeDimensional {
  id        String   @id @default(uuid())
  url       String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id            String   @id @default(uuid())
  type          PlanType
  monthly       Float
  quarterly     Float
  yearly        Float
  photoLimit    Int      @default(1)
  videoLimit    Int      @default(0)
  has360View    Boolean  @default(false)
  isMostPopular Boolean  @default(false)
  vendor        Vendor[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum PlanType {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model Availability {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Featured {
  id        String   @id @default(uuid())
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
